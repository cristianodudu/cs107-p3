# Helper Functions for Project 3
# CMSC 107 -- Fall 2018
# Done by Kristopher Micinski
# I shamelessly took most of this from: https://stackoverflow.com/questions/12151182/python-precondition-postcondition-for-member-function-how

# DO NOT edit this file

class UnimplementedExecption(Exception):
    pass

# Helper function for forall
def forallHelper(lst,f,i):
    if (i >= len(lst)): return False
    else: return f(lst[i]) and forallHelper(lst,f,i+1)

# Does f hold for every element of lst
def forall(lst, f):
    forallHelper(lst,f,0)

# Code that allows wrapping functions
import functools

def condition(preCondition=None, postCondition=None):
    def decorator(func):
        @functools.wraps(func) # presever name, docstring, etc
        def wrapper(*args, **kwargs): #NOTE: no self
            if pre_condition is not None:
               assert pre_condition(*args, **kwargs)
            retval = func(*args, **kwargs) # call original function or method
            if post_condition is not None:
               assert post_condition(retval)
            return retval
        return wrapper
    return decorator

def precondition(check):
    return condition(preCondition=check)

def postcondition(check):
    return condition(postCondition=check)
